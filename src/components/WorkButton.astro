---
const { company, position } = Astro.props;

const idLabel = company
  .toLowerCase()
  .replace(/\s/g, "-")
  .replace(/[^a-z0-9-]/g, "");
---

<div data-work-label={idLabel}>
  <button data-button-type="show" type="button">
    <h3>{company}</h3>
    <p>{position}</p>
  </button>
  <dialog id={idLabel}>
    <div>
      <button data-button-type="hide" type="button">
        <span>&#967;</span><span>Close</span>
      </button>

      <div class="scroller">
        <slot />
      </div>
      <p class="company-name" aria-hidden="true">{company}</p>
    </div>
  </dialog>
</div>

<style>
  [data-work-label] {
    margin-inline-start: auto;
    max-width: max-content;
  }

  [data-work-label] > button {
    display: grid;
    grid-template-columns: repeat(2, auto);
    align-items: baseline;
    justify-items: end;
    column-gap: 1em;

    margin-inline-start: auto;

    border: none;
    transition: opacity 250ms ease-in-out;
  }

  [data-work-label] > button h3 {
    text-align: end;
    grid-area: 1 / 2 / 2 / 3;
  }
  [data-work-label] > button p {
    text-align: end;
    grid-area: 1 / 1 / 2 / 2;
  }
  @media screen and (width < 1200px) {
    [data-work-label] > button {
      grid-template-columns: 1fr;
    }

    [data-work-label] > button h3 {
      grid-area: auto;
    }
    [data-work-label] > button p {
      grid-area: auto;
    }
  }

  dialog {
    --scroll-radius: 1em;

    inset: calc(var(--padding));

    width: calc(100% - (var(--padding) * 2));
    height: calc(100% - (var(--padding) * 2));
    border: none;

    color: inherit;
    background-color: var(--bg-color);
    box-shadow: 2px 2px 5px hsl(var(--neutral-color-900) / 20%);

    z-index: var(--z-work-dialog);

    scrollbar-width: thin;
    scrollbar-color: hsl(var(--primary-color-500)) hsl(0, 0%, 90%, 0.1);

    overflow-y: auto;
  }
  dialog::-webkit-scrollbar {
    width: 0.25em;
  }
  dialog::-webkit-scrollbar-track {
    background: hsl(0, 0%, 50%, 0.25);
    border-radius: var(--scroll-radius);
  }
  dialog::-webkit-scrollbar-thumb {
    background: hsl(var(--primary-color-500));
    border-radius: var(--scroll-radius);
  }
  dialog::-webkit-scrollbar-thumb:hover {
    background: hsl(0, 100%, 50%);
  }

  dialog::backdrop {
    background-color: hsl(0 0% 0% / 0%);
  }
  dialog:focus-visible {
    outline: none;
  }

  dialog > div {
    color: var(--text-color);
    padding: calc(var(--padding));

    display: grid;
    grid-template-rows: auto 1fr auto;

    width: 100%;
    height: 100%;

    text-align: left;

    opacity: 0;
    transition: opacity calc(var(--theme-transition-speed) / 2) ease-in-out;
  }

  .company-name {
    font-size: var(--fs-regular);
    font-weight: var(--fw-thin);
    text-align: right;
  }

  dialog button {
    text-transform: uppercase;
    text-align: right;
    border: none;
    font-size: var(--fs-small);

    display: flex;
    align-items: center;
    justify-content: end;
    gap: 1ch;

    padding-inline: 1em;
    padding-block: 0.2em;
    margin-inline-start: auto;

    transition: opacity 250ms ease-in-out;
  }
  dialog button:hover {
    opacity: 0.25;
  }

  dialog button span:first-child {
    border: 1px solid var(--border-color);
    padding-inline: 0.2em;
    scale: 1.25 1;
  }

  .scroller {
    position: relative;

    width: 100%;
    height: 100%;
    overflow: auto;

    isolation: isolate;

    display: flex;
    flex-flow: row wrap;
    align-items: center;
    justify-content: flex-start;
    align-content: flex-start;
    gap: 1em;
  }
</style>

<script>
  const body = document.querySelector("body");
  const workItems = Array.from(document.querySelectorAll("[data-work-label]"));
  const workBG = Array.from(document.querySelectorAll("[data-work-bg]"));

  if (workItems && workBG) {
    workItems.forEach((item) => {
      if (item instanceof HTMLElement) {
        const showButton = item.querySelector('[data-button-type="show"]');
        const hideButton = item.querySelector('[data-button-type="hide"]');
        const dialogElement = item.querySelector("dialog");
        const dialogDiv = item.querySelector("dialog > div") as HTMLElement;

        const delayInSeconds = 500;

        showButton.addEventListener("click", () => {
          body.classList.toggle("disable-scroll");
          dialogElement.showModal();
          setTimeout(() => {
            dialogElement.style.opacity = "1";
          }, delayInSeconds);
          setTimeout(() => {
            dialogDiv.style.opacity = "1";
          }, delayInSeconds + delayInSeconds);
        });

        hideButton.addEventListener("click", () => {
          body.classList.toggle("disable-scroll");
          dialogDiv.style.opacity = "0";
          setTimeout(() => {
            dialogElement.style.opacity = "0";
          }, delayInSeconds);
          setTimeout(() => {
            dialogElement.close();
          }, delayInSeconds + delayInSeconds);
        });

        dialogElement.addEventListener("cancel", () => {
          body.classList.remove("disable-scroll");
          dialogElement.style.opacity = "0";
          dialogDiv.style.opacity = "0";
        });

        item.addEventListener("mouseover", () => {
          const bg = workBG.find(
            (bg) =>
              bg instanceof HTMLElement &&
              bg.dataset.workBg === item.dataset.workLabel
          );
          const video = bg.querySelector("video");

          if (bg && bg instanceof HTMLElement) {
            video
              .play()
              .then(() => {
                // Video playback has started successfully
              })
              .catch((error) => {
                // Handle any errors that occur during video playback
                console.error("Error playing video:", error);
              });
          }
        });

        item.addEventListener("mouseout", () => {
          const bg = workBG.find(
            (bg) =>
              bg instanceof HTMLElement &&
              bg.dataset.workBg === item.dataset.workLabel
          );
          const video = bg.querySelector("video");

          if (bg && bg instanceof HTMLElement) {
            video.pause();
          }
        });
      }
    });
  }
</script>
